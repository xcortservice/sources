# generated by datamodel-codegen:
#   filename:  github.json
#   timestamp: 2024-10-25T23:27:20+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from discord import Embed
from pydantic import BaseModel


class Owner(BaseModel):
    name: Optional[str] = None
    email: Optional[Any] = None
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    organizations_url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    received_events_url: Optional[str] = None
    type: Optional[str] = None
    user_view_type: Optional[str] = None
    site_admin: Optional[bool] = None


class License(BaseModel):
    key: Optional[str] = None
    name: Optional[str] = None
    spdx_id: Optional[str] = None
    url: Optional[str] = None
    node_id: Optional[str] = None


class Repository(BaseModel):
    id: Optional[int] = None
    node_id: Optional[str] = None
    name: Optional[str] = None
    full_name: Optional[str] = None
    private: Optional[bool] = None
    owner: Optional[Owner] = None
    html_url: Optional[str] = None
    description: Optional[Any] = None
    fork: Optional[bool] = None
    url: Optional[str] = None
    forks_url: Optional[str] = None
    keys_url: Optional[str] = None
    collaborators_url: Optional[str] = None
    teams_url: Optional[str] = None
    hooks_url: Optional[str] = None
    issue_events_url: Optional[str] = None
    events_url: Optional[str] = None
    assignees_url: Optional[str] = None
    branches_url: Optional[str] = None
    tags_url: Optional[str] = None
    blobs_url: Optional[str] = None
    git_tags_url: Optional[str] = None
    git_refs_url: Optional[str] = None
    trees_url: Optional[str] = None
    statuses_url: Optional[str] = None
    languages_url: Optional[str] = None
    stargazers_url: Optional[str] = None
    contributors_url: Optional[str] = None
    subscribers_url: Optional[str] = None
    subscription_url: Optional[str] = None
    commits_url: Optional[str] = None
    git_commits_url: Optional[str] = None
    comments_url: Optional[str] = None
    issue_comment_url: Optional[str] = None
    contents_url: Optional[str] = None
    compare_url: Optional[str] = None
    merges_url: Optional[str] = None
    archive_url: Optional[str] = None
    downloads_url: Optional[str] = None
    issues_url: Optional[str] = None
    pulls_url: Optional[str] = None
    milestones_url: Optional[str] = None
    notifications_url: Optional[str] = None
    labels_url: Optional[str] = None
    releases_url: Optional[str] = None
    deployments_url: Optional[str] = None
    created_at: Optional[int] = None
    updated_at: Optional[str] = None
    pushed_at: Optional[int] = None
    git_url: Optional[str] = None
    ssh_url: Optional[str] = None
    clone_url: Optional[str] = None
    svn_url: Optional[str] = None
    homepage: Optional[Any] = None
    size: Optional[int] = None
    stargazers_count: Optional[int] = None
    watchers_count: Optional[int] = None
    language: Optional[str] = None
    has_issues: Optional[bool] = None
    has_projects: Optional[bool] = None
    has_downloads: Optional[bool] = None
    has_wiki: Optional[bool] = None
    has_pages: Optional[bool] = None
    has_discussions: Optional[bool] = None
    forks_count: Optional[int] = None
    mirror_url: Optional[Any] = None
    archived: Optional[bool] = None
    disabled: Optional[bool] = None
    open_issues_count: Optional[int] = None
    license: Optional[License] = None
    allow_forking: Optional[bool] = None
    is_template: Optional[bool] = None
    web_commit_signoff_required: Optional[bool] = None
    topics: Optional[List] = None
    visibility: Optional[str] = None
    forks: Optional[int] = None
    open_issues: Optional[int] = None
    watchers: Optional[int] = None
    default_branch: Optional[str] = None
    stargazers: Optional[int] = None
    master_branch: Optional[str] = None
    organization: Optional[str] = None
    custom_properties: Optional[Dict[str, Any]] = None


class Pusher(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None


class Organization(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    hooks_url: Optional[str] = None
    issues_url: Optional[str] = None
    members_url: Optional[str] = None
    public_members_url: Optional[str] = None
    avatar_url: Optional[str] = None
    description: Optional[str] = None


class Sender(BaseModel):
    login: Optional[str] = None
    id: Optional[int] = None
    node_id: Optional[str] = None
    avatar_url: Optional[str] = None
    gravatar_id: Optional[str] = None
    url: Optional[str] = None
    html_url: Optional[str] = None
    followers_url: Optional[str] = None
    following_url: Optional[str] = None
    gists_url: Optional[str] = None
    starred_url: Optional[str] = None
    subscriptions_url: Optional[str] = None
    organizations_url: Optional[str] = None
    repos_url: Optional[str] = None
    events_url: Optional[str] = None
    received_events_url: Optional[str] = None
    type: Optional[str] = None
    user_view_type: Optional[str] = None
    site_admin: Optional[bool] = None


class Author(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    username: Optional[str] = None


class Committer(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    username: Optional[str] = None


class Commit(BaseModel):
    id: Optional[str] = None
    tree_id: Optional[str] = None
    distinct: Optional[bool] = None
    message: Optional[str] = None
    timestamp: Optional[str] = None
    url: Optional[str] = None
    author: Optional[Author] = None
    committer: Optional[Committer] = None
    added: Optional[List] = None
    removed: Optional[List] = None
    modified: Optional[List[str]] = None


class HeadCommit(BaseModel):
    id: Optional[str] = None
    tree_id: Optional[str] = None
    distinct: Optional[bool] = None
    message: Optional[str] = None
    timestamp: Optional[str] = None
    url: Optional[str] = None
    author: Optional[Author] = None
    committer: Optional[Committer] = None
    added: Optional[List] = None
    removed: Optional[List] = None
    modified: Optional[List[str]] = None


class GithubPushEvent(BaseModel):
    ref: Optional[str] = None
    before: Optional[str] = None
    after: Optional[str] = None
    repository: Optional[Repository] = None
    pusher: Optional[Pusher] = None
    organization: Optional[Organization] = None
    sender: Optional[Sender] = None
    created: Optional[bool] = None
    deleted: Optional[bool] = None
    forced: Optional[bool] = None
    base_ref: Optional[Any] = None
    compare: Optional[str] = None
    commits: Optional[List[Commit]] = None
    head_commit: Optional[HeadCommit] = None

    @property
    def to_embed(self) -> Embed:
        added_count = len(self.head_commit.added)
        deleted_count = len(self.head_commit.removed)
        modified_count = len(self.head_commit.modified)

        # Construct each part of the message based on conditions
        added_message = (
            f"+ Added {added_count} {'files' if added_count > 1 else 'file'}"
            if added_count > 0
            else ""
        )
        deleted_message = (
            f"- Deleted {deleted_count} {'files' if deleted_count > 1 else 'file'}"
            if deleted_count > 0
            else ""
        )
        modified_message = (
            f"! Modified {modified_count} {'files' if modified_count > 1 else 'file'}"
            if modified_count > 0
            else ""
        )

        # Combine non-empty parts with newlines, formatted for Discord
        change_message = "\n".join(
            filter(None, [added_message, deleted_message, modified_message])
        )

        # Create description with code block formatting
        commit_count = len(self.commits)
        description = (
            f"```diff\n"  # Start diff block
            f"{change_message}\n"  # Changes in diff format
            f"```\n"  # End diff block
        )

        # Embed content with cleaned formatting
        embed = Embed(
            title=f"Commit to {self.repository.full_name} ({self.ref.split('/')[-1]})",
            description=(
                f">>> There has been **{commit_count}** {'commit' if commit_count == 1 else 'commits'} "
                f"to [`{self.repository.full_name}`](https://github.com/{self.repository.full_name})\n{description}"
            ),
        )
        if (
            len(self.commits) == 1
            and self.commits[0].message.startswith("test")
            or len(self.commits[0].message) < 5
        ):
            return
        for commit in self.commits:
            embed.add_field(
                name=f"`{commit.id[:6]}`",
                value=f"```fix\n{commit.message}\n```",
                inline=False,
            )  # Commit message block

        embed.set_author(
            name=str(self.sender.login),
            icon_url=str(self.sender.avatar_url),
            url=self.sender.html_url,
        )
        embed.timestamp = datetime.now()

        return embed
